type Token = struct {
    tag TokenTag,
    range TokenRange,
};

type TokenTag = enum {
    eof,
    invalid,
    identifier,
    special_identifier,
    string_literal,
    char_literal,
    int,
    float,
    open_paren,
    close_paren,
    open_brace,
    close_brace,
    open_bracket,
    close_bracket,
    comma,
    period,
    double_period,
    triple_period,
    colon,
    semicolon,
    fat_arrow,
    plus,
    minus,
    star,
    divide,
    modulo,
    bool_not,
    bit_not,
    bit_and,
    bit_or,
    bit_xor,
    less_than,
    greater_than,
    less_or_eql,
    greater_or_eql,
    left_shift,
    right_shift,
    eql,
    not_eql,
    plus_assign,
    minus_assign,
    star_assign,
    divide_assign,
    modulo_assign,
    bit_and_assign,
    bit_or_assign,
    bit_xor_assign,
    left_shift_assign,
    right_shift_assign,
    assign,
};

type TokenRange = struct {
    start u32,
    end u32,
};

type Lexer = struct {
    index u32,
    buffer [*]const u8,
};

type LexerState = enum {
    start,
    identifier,
    at_sign,
    string_literal,
    string_literal_back_slash,
    char_literal,
    char_literal_back_slash,
    number,
    number_saw_period,
    plus,
    minus,
    star,
    divide,
    modulo,
    bit_and,
    bit_or,
    bit_xor,
    less_than,
    greater_than,
    left_shift,
    right_shift,
    comment,
    assign,
    bool_not,
    period,
    double_period,
};

fn next(self *Lexer) Token {
    var result Token;

    result.tag = TokenTag.eof;
    result.range.start = self.index;
    result.range.end = self.index;

    var state LexerState = LexerState.start;

    while true {
        var ch = self.buffer[self.index];

        switch (state) {
            LexerState.start => switch (ch) {
                0 => {
                    result.tag = TokenTag.eof;
                    result.range.start = self.index;
                    result.range.end = self.index;

                    break;
                },

                ' ', '\r', '\n', '\t' => {},

                'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                '_' => {
                    result.tag = TokenTag.identifier;
                    result.range.start = self.index;

                    state = LexerState.identifier;
                },

                '@' => {
                    result.range.start = self.index;

                    state = LexerState.at_sign;
                },

                '"' => {
                    result.tag = TokenTag.string_literal;
                    self.index += 1;
                    result.range.start = self.index;

                    state = LexerState.string_literal;
                },

                '\'' => {
                    result.tag = TokenTag.char_literal;
                    self.index += 1;
                    result.range.start = self.index;

                    state = LexerState.char_literal;
                },

                '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' => {
                    result.tag = TokenTag.int;
                    result.range.start = self.index;

                    state = LexerState.number;
                },

                '(' => {
                    result.tag = TokenTag.open_paren;
                    result.range.start = self.index;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                ')' => {
                    result.tag = TokenTag.close_paren;
                    result.range.start = self.index;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                '{' => {
                    result.tag = TokenTag.open_brace;
                    result.range.start = self.index;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                '}' => {
                    result.tag = TokenTag.close_brace;
                    result.range.start = self.index;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                '[' => {
                    result.tag = TokenTag.open_bracket;
                    result.range.start = self.index;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                ']' => {
                    result.tag = TokenTag.close_bracket;
                    result.range.start = self.index;
                    self.index += 1;
                    result.range.end = self.index; 

                    break;
                },

                ';' => {
                    result.tag = TokenTag.semicolon;
                    result.range.start = self.index;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                '=' => {
                    result.tag = TokenTag.assign;
                    result.range.start = self.index;

                    state = LexerState.assign;
                },

                '!' => {
                    result.tag = TokenTag.bool_not;
                    result.range.start = self.index;

                    state = LexerState.bool_not;
                },

                '~' => {
                    result.tag = TokenTag.bit_not;
                    result.range.start = self.index;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                '.' => {
                    result.tag = TokenTag.period;
                    result.range.start = self.index;

                    state = LexerState.period;
                },

                '+' => {
                    result.tag = TokenTag.plus;
                    result.range.start = self.index;

                    state = LexerState.plus;
                },

                '-' => {
                    result.tag = TokenTag.minus;
                    result.range.start = self.index;

                    state = LexerState.minus;
                },

                '*' => {
                    result.tag = TokenTag.star;
                    result.range.start = self.index;

                    state = LexerState.star;
                },

                '/' => {
                    result.tag = TokenTag.divide;
                    result.range.start = self.index;

                    state = LexerState.divide;
                },

                '%' => {
                    result.tag = TokenTag.modulo;
                    result.range.start = self.index;

                    state = LexerState.modulo;
                },

                ',' => {
                    result.tag = TokenTag.comma;
                    result.range.start = self.index;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                '&' => {
                    result.tag = TokenTag.bit_and;
                    result.range.start = self.index;

                    state = LexerState.bit_and;
                },

                '|' => {
                    result.tag = TokenTag.bit_or;
                    result.range.start = self.index;

                    state = LexerState.bit_or;
                },

                '^' => {
                    result.tag = TokenTag.bit_xor;
                    result.range.start = self.index;

                    state = LexerState.bit_xor;
                },

                ':' => {
                    result.tag = TokenTag.colon;
                    result.range.start = self.index;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                '<' => {
                    result.tag = TokenTag.less_than;
                    result.range.start = self.index;

                    state = LexerState.less_than;
                },

                '>' => {
                    result.tag = TokenTag.greater_than;
                    result.range.start = self.index;

                    state = LexerState.greater_than;
                },

                else => {
                    result.tag = TokenTag.invalid;
                    result.range.start = self.index;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },
            },

            LexerState.identifier => switch (ch) {
                'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                '_' => {},

                else => {
                    result.range.end = self.index;

                    break;
                },
            }, 

            LexerState.at_sign => switch (ch) {
                'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                '_' => {
                    result.range.start = self.index;
                    result.tag = TokenTag.special_identifier;
                    state = LexerState.identifier;
                },

                else => {
                    result.tag = TokenTag.invalid;
                    result.range.end = self.index;

                    break;
                },
            },

            LexerState.string_literal => switch (ch) {
                0, '\n' => {
                    result.tag = TokenTag.invalid;
                    result.range.start = self.index;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                '"' => {
                    result.range.end = self.index;
                    self.index += 1;

                    break;
                },

                '\\' => {
                    state = LexerState.string_literal_back_slash;
                },

                else => {},
            },

            LexerState.string_literal_back_slash => switch (ch) {
                0, '\n' => {
                    result.tag = TokenTag.invalid;
                    result.range.start = self.index;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                else => {
                    state = LexerState.string_literal;
                },
            },

            LexerState.char_literal => switch (ch) {
                0, '\n' => {
                    result.tag = TokenTag.invalid;
                    result.range.start = self.index;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                '\\' => {
                    state = LexerState.char_literal_back_slash;
                },

                '\'' => {
                    result.range.end = self.index;
                    self.index += 1;

                    break;
                },

                else => {},
            },


            LexerState.char_literal_back_slash => switch (ch) {
                0, '\n' => {
                    result.tag = TokenTag.invalid;
                    result.range.start = self.index;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                else => {
                    state = LexerState.char_literal;
                },
            },

            LexerState.number => switch (ch) {
                '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' => {},

                '.' => {
                    result.tag = TokenTag.float;
                    state = LexerState.number_saw_period;
                }, 

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            LexerState.number_saw_period => switch (ch) {
                '.' => {
                    result.tag = TokenTag.int;
                    self.index -= 1;
                    result.range.end = self.index;

                    break;
                },

                else => {
                    state = LexerState.number;

                    continue;
                },
            },

            LexerState.plus => switch (ch) {
                '=' => {
                    self.index += 1;
                    result.range.end = self.index;
                    result.tag = TokenTag.plus_assign;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            LexerState.minus => switch (ch) {
                '=' => {
                    self.index += 1;
                    result.range.end = self.index;
                    result.tag = TokenTag.minus_assign;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            LexerState.star => switch (ch) {
                '=' => {
                    self.index += 1;
                    result.range.end = self.index;
                    result.tag = TokenTag.star_assign;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },


            LexerState.divide => switch (ch) {
                '/' => {
                    state = LexerState.comment;
                },

                '=' => {
                    self.index += 1;
                    result.range.end = self.index;
                    result.tag = TokenTag.divide_assign;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            LexerState.modulo => switch (ch) {
                '=' => {
                    self.index += 1;
                    result.range.end = self.index;
                    result.tag = TokenTag.modulo_assign;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            LexerState.less_than => switch (ch) {
                '<' => {
                    result.tag = TokenTag.left_shift;
                    state = LexerState.left_shift;
                },

                '=' => {
                    self.index += 1;
                    result.range.end = self.index;
                    result.tag = TokenTag.less_or_eql;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            LexerState.greater_than => switch (ch) {
                '>' => {
                    result.tag = TokenTag.right_shift;
                    state = LexerState.right_shift;
                },

                '=' => {
                    self.index += 1;
                    result.range.end = self.index;
                    result.tag = TokenTag.greater_or_eql;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            LexerState.left_shift => switch (ch) {
                '=' => {
                    self.index += 1;
                    result.range.end = self.index;
                    result.tag = TokenTag.left_shift_assign;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },
            
            LexerState.right_shift => switch (ch) {
                '=' => {
                    self.index += 1;
                    result.range.end = self.index;
                    result.tag = TokenTag.right_shift_assign;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            LexerState.comment => switch (ch) {
                0 => {
                    result.tag = TokenTag.eof;
                    result.range.start = self.index;
                    result.range.end = self.index;

                    break;
                },

                '\n' => {
                    state = LexerState.start;
                },

                else => {},
            },

            LexerState.assign => switch (ch) {
                '=' => {
                    result.tag = TokenTag.eql;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                '>' => {
                    result.tag = TokenTag.fat_arrow;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            LexerState.bool_not => switch (ch) {
                '=' => {
                    result.tag = TokenTag.not_eql;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            LexerState.period => switch (ch) {
                '.' => {
                    result.tag = TokenTag.double_period;
                    state = LexerState.double_period;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            LexerState.double_period => switch (ch) {
                '.' => {
                    result.tag = TokenTag.triple_period;
                    self.index += 1;
                    result.range.end = self.index;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            else => {},
        }

        self.index += 1;
    }

    return result;
}
