module cerium::lexer;

type Token = struct {
    tag Token::Tag,
    range Token::Range,
};

type Token::Tag = enum {
    eof,
    invalid,
    identifier,
    string_literal,
    char_literal,
    int,
    float,
    open_paren,
    close_paren,
    open_brace,
    close_brace,
    open_bracket,
    close_bracket,
    bang,
    tilde,
    ampersand,
    pipe,
    caret,
    comma,
    period,
    double_period,
    triple_period,
    percent,
    colon,
    semicolon,
    plus,
    minus,
    star,
    less_than,
    double_less_than,
    greater_than,
    double_greater_than,
    forward_slash,
    bang_equal_sign,
    equal_sign,
    double_equal_sign,
    fat_arrow,
};

type Token::Range = struct {
    start usize,
    end usize,
};

type Lexer = struct {
    index usize,
    buffer [*]const u8,
};

type Lexer::State = enum {
    start,
    identifier,
    string_literal,
    string_literal_back_slash,
    char_literal,
    char_literal_back_slash,
    number,
    forward_slash,
    comment,
    equal_sign,
    bang,
    period,
    double_period,
    less_than,
    greater_than,
};

fn Lexer::next(self *Lexer) Token {
    var result Token;

    result.tag = Token::Tag::eof;
    result.range.start = self.index;
    result.range.end = self.index;

    var state Lexer::State = Lexer::State::start;

    while true {
        var ch = self.buffer[self.index];

        switch (state) {
            Lexer::State::start => switch (ch) {
                0 => {
                    result.tag = Token::Tag::eof;
                    result.range.start = self.index;
                    result.range.end = self.index;

                    break;
                },

                ' ', '\r', '\n', '\t' => {},

                'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                '_' => {
                    result.tag = Token::Tag::identifier;
                    result.range.start = self.index;

                    state = Lexer::State::identifier;
                },

                '"' => {
                    result.tag = Token::Tag::string_literal;
                    self.index = self.index + 1;
                    result.range.start = self.index;

                    state = Lexer::State::string_literal;
                },

                '\'' => {
                    result.tag = Token::Tag::char_literal;
                    self.index = self.index + 1;
                    result.range.start = self.index;

                    state = Lexer::State::char_literal;
                },

                '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' => {
                    result.tag = Token::Tag::int;
                    result.range.start = self.index;

                    state = Lexer::State::number;
                },

                '/' => {
                    result.tag = Token::Tag::forward_slash;
                    result.range.start = self.index;

                    state = Lexer::State::forward_slash;
                },

                '(' => {
                    result.tag = Token::Tag::open_paren;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                ')' => {
                    result.tag = Token::Tag::close_paren;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                '{' => {
                    result.tag = Token::Tag::open_brace;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                '}' => {
                    result.tag = Token::Tag::close_brace;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                '[' => {
                    result.tag = Token::Tag::open_bracket;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                ']' => {
                    result.tag = Token::Tag::close_bracket;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index; 

                    break;
                },

                ';' => {
                    result.tag = Token::Tag::semicolon;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                '=' => {
                    result.tag = Token::Tag::equal_sign;
                    result.range.start = self.index;

                    state = Lexer::State::equal_sign;
                },

                '!' => {
                    result.tag = Token::Tag::bang;
                    result.range.start = self.index;

                    state = Lexer::State::bang;
                },

                '~' => {
                    result.tag = Token::Tag::tilde;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                '.' => {
                    result.tag = Token::Tag::period;
                    result.range.start = self.index;

                    state = Lexer::State::period;
                },

                '+' => {
                    result.tag = Token::Tag::plus;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                '-' => {
                    result.tag = Token::Tag::minus;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                '*' => {
                    result.tag = Token::Tag::star;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                '%' => {
                    result.tag = Token::Tag::percent;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                ',' => {
                    result.tag = Token::Tag::comma;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                '&' => {
                    result.tag = Token::Tag::ampersand;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                '|' => {
                    result.tag = Token::Tag::pipe;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                '^' => {
                    result.tag = Token::Tag::caret;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                ':' => {
                    result.tag = Token::Tag::colon;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                '<' => {
                    result.tag = Token::Tag::less_than;
                    result.range.start = self.index;

                    state = Lexer::State::less_than;
                },

                '>' => {
                    result.tag = Token::Tag::greater_than;
                    result.range.start = self.index;

                    state = Lexer::State::greater_than;
                },

                else => {
                    result.tag = Token::Tag::invalid;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },
            },

            Lexer::State::identifier => switch (ch) {
                'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
                '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                '_', ':' => {},

                else => {
                    result.range.end = self.index;

                    break;
                },
            }, 

            Lexer::State::string_literal => switch (ch) {
                0, '\n' => {
                    result.tag = Token::Tag::invalid;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                '"' => {
                    result.range.end = self.index;
                    self.index = self.index + 1;

                    break;
                },

                '\\' => {
                    state = Lexer::State::string_literal_back_slash;
                },

                else => {},
            },

            Lexer::State::string_literal_back_slash => switch (ch) {
                0, '\n' => {
                    result.tag = Token::Tag::invalid;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                else => {
                    state = Lexer::State::string_literal;
                },
            },

            Lexer::State::char_literal => switch (ch) {
                0, '\n' => {
                    result.tag = Token::Tag::invalid;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                '\\' => {
                    state = Lexer::State::char_literal_back_slash;
                },

                '\'' => {
                    result.range.end = self.index;
                    self.index = self.index + 1;

                    break;
                },

                else => {},
            },


            Lexer::State::char_literal_back_slash => switch (ch) {
                0, '\n' => {
                    result.tag = Token::Tag::invalid;
                    result.range.start = self.index;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                else => {
                    state = Lexer::State::char_literal;
                },
            },

            Lexer::State::number => switch (ch) {
                '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' => {},

                '.' => {
                    result.tag = Token::Tag::float;
                }, 

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            Lexer::State::forward_slash => switch (ch) {
                '/' => {
                    state = Lexer::State::comment;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            Lexer::State::comment => switch (ch) {
                0 => {
                    result.tag = Token::Tag::eof;
                    result.range.start = self.index;
                    result.range.end = self.index;

                    break;
                },

                '\n' => {
                    state = Lexer::State::start;
                },

                else => {},
            },

            Lexer::State::equal_sign => switch (ch) {
                '=' => {
                    result.tag = Token::Tag::double_equal_sign;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                '>' => {
                    result.tag = Token::Tag::fat_arrow;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            Lexer::State::bang => switch (ch) {
                '=' => {
                    result.tag = Token::Tag::bang_equal_sign;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            Lexer::State::period => switch (ch) {
                '.' => {
                    result.tag = Token::Tag::double_period;

                    state = Lexer::State::double_period;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            Lexer::State::double_period => switch (ch) {
                '.' => {
                    result.tag = Token::Tag::triple_period;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            Lexer::State::less_than => switch (ch) {
                '<' => {
                    result.tag = Token::Tag::double_less_than;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            Lexer::State::greater_than => switch (ch) {
                '>' => {
                    result.tag = Token::Tag::double_greater_than;
                    self.index = self.index + 1;
                    result.range.end = self.index;

                    break;
                },

                else => {
                    result.range.end = self.index;

                    break;
                },
            },

            else => {},
        }

        self.index = self.index + 1;
    }

    return result;
}
