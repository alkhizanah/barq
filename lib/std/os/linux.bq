std :: @import("../../std.bq");
Arch :: std.target.Arch;

arch_bits :: switch @target_arch {
    Arch.x86 => @import("linux/x86.bq"),
    Arch.x86_64 => @import("linux/x86_64.bq"),

    else => struct {},
}

SYS :: arch_bits.SYS; 
syscall1 :: arch_bits.syscall1;
syscall2 :: arch_bits.syscall2; 
syscall3 :: arch_bits.syscall3; 
syscall4 :: arch_bits.syscall4; 
syscall5 :: arch_bits.syscall5; 
syscall6 :: arch_bits.syscall6; 

mode_t :: arch_bits.mode_t;

Stat :: arch_bits.Stat;

read :: fn (fd : s32, bufferptr : usize, count : usize) usize {
    return syscall3(SYS.read, (&fd as *u32).*, bufferptr, count);
}

STDIN  :: 0;
STDOUT :: 1;
STDERR :: 2;

write :: fn (fd : s32, bufferptr : usize, count : usize) usize {
    return syscall3(SYS.write, (&fd as *u32).*, bufferptr, count);
}

open :: fn (path : [*]const u8, flags : u32, mode : mode_t) s32 {
    if @has_field(SYS, "open") {
        return (&(syscall3(SYS.open, path as usize, flags, mode) as u32) as *s32).*;
    } else {
        return openat(AT_FDCWD, path, flags, mode);
    }

    return 0;
}

AT_FDCWD :: -100;

openat :: fn (dirfd : s32, path : [*]const u8, flags : u32, mode : mode_t) s32 {
    return (&(syscall4(SYS.openat, (&dirfd as *u32).*, path as usize, flags, mode) as u32) as *s32).*;
}

close :: fn (fd : s32) s32 {
    return (&(syscall1(SYS.close, (&fd as *u32).* as usize) as u32) as *s32).*;
}

uid_t :: u32;
gid_t :: u32;

timespec :: struct {
    sec : ssize,
    nsec : ssize,
}

statx_timestamp :: struct {
    sec : s64,
    nsec : u32,
    __pad1 : u32,
}

Statx :: struct {
    mask : u32,
    blksize : u32,
    attributes : u64,
    nlink : u32,
    uid : uid_t,
    gid : gid_t,
    mode : u16,
    __pad1 : u16,
    ino : u64,
    size : u64,
    blocks : u64,
    attributes_mask : u64,
    atime : statx_timestamp,
    btime : statx_timestamp,
    ctime : statx_timestamp,
    mtime : statx_timestamp,
    rdev_major : u32,
    rdev_minor : u32,
    dev_major : u32,
    dev_minor : u32,
    __pad2 : [14]u64,
}

stat :: fn (path : [*]const u8, statbuf : *Stat) usize {
    return syscall2(SYS.stat, path as usize, statbuf as usize);
}

lstat :: fn (path : [*]const u8, statbuf : *Stat) usize {
    return syscall2(SYS.lstat, path as usize, statbuf as usize);
}

fstat :: fn (fd : s32, statbuf : *Stat) usize {
    return syscall2(SYS.fstat, (&fd as *u32).* as usize, statbuf as usize);
}

fstatat :: fn (dirfd : s32, path : [*]const u8, statbuf : *Stat, flags : u32) usize {
    return syscall4(SYS.fstatat64, (&dirfd as *u32).*, path as usize, statbuf as usize, flags);
}

statx :: fn (dirfd : s32, path : [*]const u8, flags : u32, mask : u32, statxbuf : *Statx) usize {
    return syscall5(SYS.statx, (&dirfd as *u32).*, path as usize, flags, mask, statxbuf as usize);
}

sendfile :: fn (outfd : s32, infd : s32, offset : *s64, count : usize) usize {
    return syscall5(SYS.sendfile, (&outfd as *u32).*, (&infd as *u32).*, offset as usize, count, 0);
}

sendto :: fn (fd : s32, buf : [*]const u8, len : usize, flags : u32, addr : *const sockaddr, addrlen : socklen_t) usize {
    return syscall6(SYS.sendto, (&fd as *u32).*, buf as usize, len, flags, addr as usize, addrlen);
}

access :: fn (path : [*]const u8, mode : u32) usize {
    return syscall3(SYS.access, path as usize, mode, 0);
}

AF_INET :: 2;
SOCK_STREAM :: 1;

socket :: fn (domain : u32, type : u32, protocol : u32) s32 {
    return (&(syscall3(SYS.socket, domain, type, protocol) as u32) as *s32).*;
}

SOL_SOCKET :: 1;
SO_REUSEADDR :: 2;
SO_REUSEPORT :: 15;

setsockopt :: fn (fd : s32, level : u32, optname : u32, optvalptr : usize, optlen : usize) {
    syscall5(SYS.setsockopt, (&fd as *u32).*, level, optname, optvalptr, optlen);
}

sa_family_t :: u16;
in_port_t :: u16;
socklen_t :: u32;

sockaddr :: struct {
   family : sa_family_t,
   data : [14]u8,
}

sockaddr_in :: struct {
    family : sa_family_t,
    port : in_port_t,
    addr : u32,
    zero : [8]u8,
}

accept :: fn (fd : s32, addr : *sockaddr, addrlenptr : *socklen_t) s32 {
    return accept4(fd, addr, addrlenptr, 0);
}

accept4 :: fn (fd : s32, addr : *sockaddr, addrlenptr : *socklen_t, flag : s32) s32 {
    return (&(syscall4(SYS.accept4, (&fd as *u32).*, addr as usize, addrlenptr as usize, (&flag as *u32).*) as u32) as *s32).*;
}

bind :: fn (fd : s32, addr : *const sockaddr, addrlen : socklen_t) usize {
    return syscall3(SYS.bind, (&fd as *u32).*, addr as usize, addrlen as usize);
}

listen :: fn (fd : s32, backlog : u32) usize {
    return syscall2(SYS.listen, (&fd as *u32).*, backlog);
}

exit :: fn (status : u8) {
    syscall1(SYS.exit, status);
}

exit_group :: fn (status : u8) {
    syscall1(SYS.exit_group, status);
}

mmap :: fn (addr : usize, length : usize, prot : u32, flags : u32, fd : s32, offset : s64) usize {
    if @has_field(SYS, "mmap2") {
        return syscall6(SYS.mmap2, addr, length, prot, flags, (&fd as *u32).*, ((&offset as *u64).* / arch_bits.MMAP2_UNIT) as u32);
    } else {
        return syscall6(SYS.mmap, addr, length, prot, flags, (&fd as *u32).*, (&offset as *u64).*);
    }

    return 0;
}

mprotect :: fn (addr : usize, length : usize, prot : u32) s32 {
    return (&(syscall3(SYS.mprotect, addr, length, prot) as u32) as *s32).*;
}

munmap :: fn (addr : usize, length : usize) s32 {
    return (&(syscall2(SYS.munmap, addr, length) as u32) as *s32).*;
}

mremap :: fn (old_addr : usize, old_len : usize, new_len : usize, flags : u32, new_addr : usize) usize {
    return syscall5(SYS.mremap, old_addr, old_len, new_len, flags, new_addr);
}
