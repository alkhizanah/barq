module std::os::linux;

type SYS = enum usize {
    read,
    write,
    open,
    close,
    mmap = 9,
    mprotect,
    munmap,
    mremap = 25,
    socket = 41,
    connect,
    accept,
    bind = 49,
    listen,
    setsockopt = 54,
    exit = 60,
    exit_group = 231,
};

fn syscall1(code SYS, arg1 usize) usize {
    return asm {
        "syscall"
        : "={rax}" (usize)
        : "{rax}" (code),
          "{rdi}" (arg1),
        : "rcx", "r11", "memory"
    };
}

fn syscall2(code SYS, arg1 usize, arg2 usize) usize {
    return asm {
        "syscall"
        : "={rax}" (usize)
        : "{rax}" (code),
          "{rdi}" (arg1),
          "{rsi}" (arg2),
        : "rcx", "r11", "memory"
    };
}

fn syscall3(code SYS, arg1 usize, arg2 usize, arg3 usize) usize {
    return asm {
        "syscall"
        : "={rax}" (usize)
        : "{rax}" (code),
          "{rdi}" (arg1),
          "{rsi}" (arg2),
          "{rdx}" (arg3),
        : "rcx", "r11", "memory"
    };
}

fn syscall4(code SYS, arg1 usize, arg2 usize, arg3 usize, arg4 usize) usize {
    return asm {
        "syscall"
        : "={rax}" (usize)
        : "{rax}" (code),
          "{rdi}" (arg1),
          "{rsi}" (arg2),
          "{rdx}" (arg3),
          "{r10}" (arg4),
        : "rcx", "r11", "memory"
    };
}

fn syscall5(code SYS, arg1 usize, arg2 usize, arg3 usize, arg4 usize, arg5 usize) usize {
    return asm {
        "syscall"
        : "={rax}" (usize)
        : "{rax}" (code),
          "{rdi}" (arg1),
          "{rsi}" (arg2),
          "{rdx}" (arg3),
          "{r10}" (arg4),
          "{r8}" (arg5),
        : "rcx", "r11", "memory"
    };
}

fn syscall6(code SYS, arg1 usize, arg2 usize, arg3 usize, arg4 usize, arg5 usize, arg6 usize) usize {
    return asm {
        "syscall"
        : "={rax}" (usize)
        : "{rax}" (code),
          "{rdi}" (arg1),
          "{rsi}" (arg2),
          "{rdx}" (arg3),
          "{r10}" (arg4),
          "{r8}" (arg5),
          "{r9}" (arg6),
        : "rcx", "r11", "memory"
    };
}

fn read(fd s32, bufferptr usize, count usize) usize {
    return syscall3(SYS::read, (&fd as *u32).*, bufferptr, count);
}

const STDIN = 0;
const STDOUT = 1;
const STDERR = 2;

fn write(fd s32, bufferptr usize, count usize) usize {
    return syscall3(SYS::write, (&fd as *u32).*, bufferptr, count);
}

const AF_INET = 2;
const SOCK_STREAM = 1;

fn socket(domain u32, type_ u32, protocol u32) s32 {
    return (&(syscall3(SYS::socket, domain, type_, protocol) as u32) as *s32).*;
}

const SOL_SOCKET = 1;
const SO_REUSEADDR = 2;
const SO_REUSEPORT = 15;

fn setsockopt(fd s32, level u32, optname u32, optvalptr usize, optlen usize) void {
    syscall5(SYS::setsockopt, (&fd as *u32).*, level, optname, optvalptr, optlen);
}

type sa_family_t = u16;
type in_port_t = u16;
type socklen_t = u32;

type sockaddr = struct {
   family sa_family_t,
   data [14]u8,
};

type sockaddr::in = struct {
    family sa_family_t,
    port in_port_t,
    addr u32,
    zero [8]u8,
};

fn accept(fd s32, addrptr *sockaddr, addrlenptr *socklen_t) s32 {
    return (&(syscall4(SYS::accept, (&fd as *u32).*, addrptr as usize, addrlenptr as usize, 0) as u32) as *s32).*;
}

fn bind(fd s32, addrptr *const sockaddr, addrlen socklen_t) usize {
    return syscall3(SYS::bind, (&fd as *u32).*, addrptr as usize, addrlen as usize);
}

fn listen(fd s32, backlog u32) usize {
    return syscall2(SYS::listen, (&fd as *u32).*, backlog);
}

fn exit(status u8) void {
    syscall1(SYS::exit, status);
}

fn exit_group(status u8) void {
    syscall1(SYS::exit_group, status);
}

fn close(fd s32) s32 {
    return (&(syscall1(SYS::close, (&fd as *u32).* as usize) as u32) as *s32).*;
}

fn mmap(addr usize, length usize, prot u32, flags u32, fd s32, offset s64) usize {
    return syscall6(SYS::mmap, addr, length, prot, flags, (&fd as *u32).*, (&offset as *u64).*);
}

fn mprotect(addr usize, length usize, prot u32) s32 {
    return (&(syscall3(SYS::mprotect, addr, length, prot) as u32) as *s32).*;
}

fn munmap(addr usize, length usize) s32 {
    return (&(syscall2(SYS::munmap, addr, length) as u32) as *s32).*;
}

fn mremap(old_addr usize, old_len usize, new_len usize, flags u32, new_addr usize) usize {
    return syscall5(SYS::mremap, old_addr, old_len, new_len, flags, new_addr);
}
