std :: @import("../std.bq");
Allocator :: std.mem.Allocator;
AllocatorVTable :: std.mem.AllocatorVTable;

c_allocator_vtable := @uninitialized(AllocatorVTable);

c_allocator_init :: fn () Allocator @callconv(inline) {
    c_allocator_vtable = AllocatorVTable.{
        .alloc = &c_alloc,
        .resize = &std.mem.allocator_no_resize,
        .remap = &c_remap,
        .free = &c_free,
    };

    return Allocator.{
        .ctx = @uninitialized(*void),
        .vtable = &c_allocator_vtable,
    };
}

c_alloc :: fn (ctx : *void, len : usize) [*]u8 {
    return std.c.malloc(len) as [*]u8;
}

c_remap :: fn (ctx : *void, memory : []u8, new_len : usize) [*]u8 {
    return std.c.realloc(memory.ptr as *void, new_len) as [*]u8;
}

c_free :: fn (ctx : *void, memory : []u8) void {
    std.c.free(memory.ptr as *void);
}
