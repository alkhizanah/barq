std :: @import("std");

print_entire_file :: fn (handle : Handle) {
    chunk := @uninitialized([1024]u8);

    while true {
        n :: (&read(handle, &chunk) as *s32).*;

        if n > 0 {
            print(chunk[0..(n as usize)]);
        } else if n < 0 {
            eprintln("error: could not read file");
            break;
        } else {
            break;
        }
    }

    close(handle);
}

print_stdin_loop :: fn () {
    stdin :: get_stdin_handle();

    while true {
        print_entire_file(stdin);
    }
}

print_concatenated_files :: fn (paths : [][*]const u8) {
    i : usize = 0;

    while i < paths.len {
        handle := open(span(paths[i], 0), OpenFlags.{ .mode = OpenMode.read_only });

        if handle < 0 {
            eprintln("error: could not open file");
        } else {
            print_entire_file(handle);
        }

        i += 1;
    }
}

main :: fn () {
    args :: std.process.args;

    if args.len < 2 {
        print_stdin_loop();
    } else {
        print_concatenated_files(args[1..args.len]);
    }
}

OpenFlags :: std.fs.OpenFlags;
OpenMode :: std.fs.OpenMode;
Handle :: std.fs.Handle;
open :: std.fs.open;
close :: std.fs.close;
read :: std.fs.read;
print :: std.io.print;
eprint :: std.io.eprint;
eprintln :: std.io.eprintln;
get_stdin_handle :: std.io.get_stdin_handle;
exit :: std.process.exit;
span :: std.mem.span;
