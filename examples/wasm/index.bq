// A little Web Assembly experiment to render random noise colors
//
// Compilation Guide:
// 1. Change your working directory to `examples/wasm`
// 2. Get a Barq compiler, compile the example into wasm file with the default runner being disabled
//    i.e: `barq compile index.bq --output index.wasm --emit object --runner none --target wasm32-wasi`
// 3. Get a Wasm linker, link the wasm file with `allow-undefined`, `--foreign-all`, `--no-entry` options
//    i.e: `wasm-ld -o index.wasm index.wasm --no-entry --export-all --allow-undefined`
// 4. Start a new http server in `examples/wasm` directory
//    i.e: `python3 -m http.server`
// 5. Open the http server in your browser
//    i.e: `firefox localhost:8000`

set_color :: fn (r : u8, g : u8, b : u8) @foreign("set_color");
draw_point :: fn (x : u32, y : u32) @foreign("draw_point");
rand :: fn (end : u32) u32 @foreign("rand");

get_width :: fn () u32 @foreign("get_width");
get_height :: fn () u32 @foreign("get_height");

width : u32;
height : u32;

noise :: fn () {
    i : u8 = 0;

    while i < 255 {
        r := rand(255) as u8;
        g := rand(255) as u8;
        b := rand(255) as u8;

        x := rand(width);
        y := rand(height);

        set_color(r, g, b);
        draw_point(x, y);

        i += 1;
    }
}

setup :: fn () @foreign("setup") {
    width = get_width();
    height = get_height();
}

draw :: fn () @foreign("draw") {
    noise();
}
