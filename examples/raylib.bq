// A little raylib experiments
//
// Compilation Guide:
// 1. Get a Barq compiler, compile the example into object file with the default runner being disabled
//    i.e: `barq compile examples/raylib.bq --output raylib_example.o --emit object --runner none`
// 2. Get a C compiler, use it to link the object file produced by Barq
//                      with Raylib and C runtime library and C math library
//    i.e: `cc raylib_example.o -l:libraylib.a -lm -o raylib_example`

noise :: fn () {
    color : Color;

    i : u8 = 0;

    while i < 255 {
        color.r = GetRandomValue(0, 255) as c_uchar;
        color.g = GetRandomValue(0, 255) as c_uchar;
        color.b = GetRandomValue(0, 255) as c_uchar;
        color.a = GetRandomValue(0, 255) as c_uchar;

        DrawPixel(GetRandomValue(0, GetRenderWidth()), GetRandomValue(0, GetRenderHeight()), color);

        i += 1;
    }
}

circle_equation :: fn (boundaries : Vector2, position : *Vector2, color : *Color) {
    cx := boundaries.x / 2.0;
    cy := boundaries.y / 2.0;

    dx := position.x - cx;
    dy := position.y - cy;

    dx_sqr := dx * dx;
    dy_sqr := dy * dy;

    radius :: 50.0;
    radius_sqr :: radius * radius;

    if !(dx_sqr + dy_sqr > radius_sqr) {
        color.r = 0;
        color.g = 0;
        color.b = 255;
        color.a = 255;
    } else {
        color.r = 0;
        color.g = 0;
        color.b = 0;
        color.a = 255;
    }
}

squircle_equation :: fn (boundaries : Vector2, position : *Vector2, color : *Color) {
    cx := boundaries.x / 2.0;
    cy := boundaries.y / 2.0;

    dx := position.x - cx;
    dy := position.y - cy;

    dx_sqr := dx * dx;
    dy_sqr := dy * dy;

    squareness :: 0.8;
    squareness_sqr :: squareness * squareness;

    radius :: 50.0;
    radius_sqr :: radius * radius;

    if !(dx_sqr + dy_sqr - (squareness_sqr / radius_sqr) * dx_sqr * dy_sqr > radius_sqr) {
        color.r = 0;
        color.g = 0;
        color.b = 255;
        color.a = 255;
    } else {
        color.r = 0;
        color.g = 0;
        color.b = 0;
        color.a = 255;
    }
}

graph_equation :: fn (boundaries : Vector2, position : *Vector2, color : *Color) {
    // circle_equation(boundaries, position, color);
    // squircle_equation(boundaries, position, color);
}

graph :: fn () {
    boundaries : Vector2;
    boundaries.x = GetRenderWidth() as c_float;
    boundaries.y = GetRenderHeight() as c_float;

    position : Vector2;
    position.y = 0.0;

    red : Color;
    red.r = 255;
    red.g = 0;
    red.b = 0;
    red.a = 255;

    while position.y < boundaries.y {
        position.x = 0.0;

        while position.x < boundaries.x {
            draw_position := position;
            draw_color := red;

            graph_equation(boundaries, &draw_position, &draw_color);

            DrawPixel(draw_position.x as c_int, draw_position.y as c_int, draw_color);

            position.x += 1.0;
        }

        position.y += 1.0;
    }
}

main :: fn () u8 @foreign("main") {
    SetConfigFlags(FLAG_WINDOW_RESIZABLE);

    InitWindow(800, 600, "Raylib Example");

    while !WindowShouldClose() {
        BeginDrawing();

        noise();
        // graph();

        EndDrawing();
    }

    CloseWindow();

    return 0;
}

Vector2 :: struct {
    x : c_float,
    y : c_float,
}

Color :: struct {
    r : c_uchar,
    g : c_uchar,
    b : c_uchar,
    a : c_uchar,
}

FLAG_WINDOW_RESIZABLE :: 0x00000004;

SetConfigFlags :: fn (flags : c_uint) @foreign("SetConfigFlags");

InitWindow :: fn (width : c_int, height : c_int, title : [*]const u8) @foreign("InitWindow");
CloseWindow :: fn () @foreign("CloseWindow");
WindowShouldClose :: fn () bool @foreign("WindowShouldClose");

GetRenderWidth :: fn () c_int @foreign("GetRenderWidth");
GetRenderHeight :: fn () c_int @foreign("GetRenderHeight");

BeginDrawing :: fn () @foreign("BeginDrawing");
EndDrawing :: fn () @foreign("EndDrawing");

SetRandomSeed :: fn (seed : c_int) @foreign("SetRandomSeed");
GetRandomValue :: fn (min : c_int, max : c_int) c_int @foreign("GetRandomValue");

DrawPixel :: fn (x : c_int, y : c_int, color : Color) @foreign("DrawPixel");
