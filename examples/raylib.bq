// A little raylib experiments
//
// Compilation Guide:
// 1. Get a Barq compiler, compile the example into object file with the default runner being disabled
//    i.e: `barq compile examples/raylib.bq --output raylib_example.o --emit object --runner none`
// 2. Get a C compiler, use it to link the object file produced by Barq
//                      with Raylib and C runtime library and C math library
//    i.e: `cc raylib_example.o -l:libraylib.a -lm -o raylib_example`

noise :: fn () {
    color := @uninitialized(Color);

    i : u8 = 0;

    while i < 255 {
        color.r = get_random_value(0, 255) as c_uchar;
        color.g = get_random_value(0, 255) as c_uchar;
        color.b = get_random_value(0, 255) as c_uchar;
        color.a = get_random_value(0, 255) as c_uchar;

        x :: get_random_value(0, get_render_width());
        y :: get_random_value(0, get_render_height());

        draw_pixel(x, y, color);

        i += 1;
    }
}

main :: fn () u8 @foreign {
    set_config_flags(FLAG_WINDOW_RESIZABLE);

    init_window(800, 600, "Raylib Example");

    while !window_should_close() {
        begin_drawing();

        noise();

        end_drawing();
    }

    closw_window();

    return 0;
}

Vector2 :: struct {
    x : c_float,
    y : c_float,
}

Color :: struct {
    r : c_uchar,
    g : c_uchar,
    b : c_uchar,
    a : c_uchar,
}

FLAG_WINDOW_RESIZABLE :: 0x00000004;

set_config_flags :: fn (flags : c_uint) @foreign("SetConfigFlags");

init_window :: fn (width : c_int, height : c_int, title : [*]const u8) @foreign("InitWindow");
closw_window :: fn () @foreign("CloseWindow");
window_should_close :: fn () bool @foreign("WindowShouldClose");

get_render_width :: fn () c_int @foreign("GetRenderWidth");
get_render_height :: fn () c_int @foreign("GetRenderHeight");

begin_drawing :: fn () @foreign("BeginDrawing");
end_drawing :: fn () @foreign("EndDrawing");

set_random_seed :: fn (seed : c_int) @foreign("SetRandomSeed");
get_random_value :: fn (min : c_int, max : c_int) c_int @foreign("GetRandomValue");

draw_pixel :: fn (x : c_int, y : c_int, color : Color) @foreign("DrawPixel");
