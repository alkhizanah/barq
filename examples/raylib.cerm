// A little raylib experiments
//
// Compilation Guide:
// 1. Get a Cerium compiler, compile the example into object file with the default runner being disabled
//    i.e: `cerium compile examples/raylib.cerm --output raylib_example.o --emit object --runner none`
// 2. Get a C compiler, use it to link the object file produced by Cerium
//                      with Raylib and C runtime library and C math library
//    i.e: `cc raylib_example.o -l:libraylib.a -lm -o raylib_example`

fn noise() {
    var color Color;

    var i u8 = 0;

    while i < 255 {
        color.r = GetRandomValue(0, 255) as c_uchar;
        color.g = GetRandomValue(0, 255) as c_uchar;
        color.b = GetRandomValue(0, 255) as c_uchar;
        color.a = GetRandomValue(0, 255) as c_uchar;

        DrawPixel(GetRandomValue(0, GetRenderWidth()), GetRandomValue(0, GetRenderHeight()), color);

        i += 1;
    }
}

fn circle_equation(boundaries Vector2, position *Vector2, color *Color) {
    var cx = boundaries.x / 2.0;
    var cy = boundaries.y / 2.0;

    var dx = position.x - cx;
    var dy = position.y - cy;

    var dx_sqr = dx * dx;
    var dy_sqr = dy * dy;

    const radius = 50.0;
    const radius_sqr = radius * radius;

    if !(dx_sqr + dy_sqr > radius_sqr) {
        color.r = 0;
        color.g = 0;
        color.b = 255;
        color.a = 255;
    } else {
        color.r = 0;
        color.g = 0;
        color.b = 0;
        color.a = 255;
    }
}

fn squircle_equation(boundaries Vector2, position *Vector2, color *Color) {
    var cx = boundaries.x / 2.0;
    var cy = boundaries.y / 2.0;

    var dx = position.x - cx;
    var dy = position.y - cy;

    var dx_sqr = dx * dx;
    var dy_sqr = dy * dy;

    const squareness = 0.8;
    const squareness_sqr = squareness * squareness;

    const radius = 50.0;
    const radius_sqr = radius * radius;

    if !(dx_sqr + dy_sqr - (squareness_sqr / radius_sqr) * dx_sqr * dy_sqr > radius_sqr) {
        color.r = 0;
        color.g = 0;
        color.b = 255;
        color.a = 255;
    } else {
        color.r = 0;
        color.g = 0;
        color.b = 0;
        color.a = 255;
    }
}

fn graph_equation(boundaries Vector2, position *Vector2, color *Color) {
    // circle_equation(boundaries, position, color);
    // squircle_equation(boundaries, position, color);
}

fn graph() {
    var boundaries Vector2;
    boundaries.x = GetRenderWidth() as c_float;
    boundaries.y = GetRenderHeight() as c_float;

    var position Vector2;
    position.y = 0.0;

    var red Color;
    red.r = 255;
    red.g = 0;
    red.b = 0;
    red.a = 255;

    while position.y < boundaries.y {
        position.x = 0.0;

        while position.x < boundaries.x {
            var draw_position = position;
            var draw_color = red;

            graph_equation(boundaries, &draw_position, &draw_color);

            DrawPixel(draw_position.x as c_int, draw_position.y as c_int, draw_color);

            position.x += 1.0;
        }

        position.y += 1.0;
    }
}

export fn main() u8 {
    InitWindow(800, 600, "Raylib Example");


    while !WindowShouldClose() {
        BeginDrawing();

        noise();
        // graph();

        EndDrawing();
    }

    CloseWindow();

    return 0;
}

type Vector2 = struct {
    x c_float,
    y c_float,
};

type Color = struct {
    r c_uchar,
    g c_uchar,
    b c_uchar,
    a c_uchar,
};

extern fn InitWindow(width c_int, height c_int, title [*]const u8);
extern fn CloseWindow();
extern fn WindowShouldClose() bool;

extern fn GetRenderWidth() c_int;
extern fn GetRenderHeight() c_int;

extern fn BeginDrawing();
extern fn EndDrawing();

extern fn SetRandomSeed(seed c_int);
extern fn GetRandomValue(min c_int, max c_int) c_int;

extern fn DrawPixel(x c_int, y c_int, color Color);
