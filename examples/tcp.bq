std :: @import("std");

Client :: struct {
    fd : s32,
    address : sockaddr,
}

client_close :: fn (client : Client) {
    close(client.fd);
}

Server :: struct {
    fd : s32,
}

server_init :: fn (server : *Server) {
    print("creating socket.. ");

    if (server.fd = socket(AF_INET, SOCK_STREAM, 0)) < 0 {
        eprintln("failure");
        exit(1);
    } else {    
        println("success");
    }

    optlevel : u32 = 1;
    setsockopt(server.fd, SOL_SOCKET, SO_REUSEADDR, &optlevel as usize, 4);
    setsockopt(server.fd, SOL_SOCKET, SO_REUSEPORT, &optlevel as usize, 4);

    address := sockaddr_in.{
        .family = AF_INET,
        .port = 0x901f,
        .addr = 0,
        .zero = ([8]u8).{0,0,0,0,0,0,0,0},
    };

    print("binding.. ");

    if bind(server.fd, &address as *sockaddr, 16) != 0 {
        eprintln("failure");
        exit(1);
    } else {
        println("success");
    }

    print("listening.. ");

    if listen(server.fd, 5) != 0 {
        eprintln("failure");
        exit(1);
    } else {
        println("success");
   }
}

server_accept :: fn (server : Server, client : *Client) {
    address_len : socklen_t = 0;

    print("accepting request.. ");

    if (client.fd = accept(server.fd, &client.address, &address_len)) < 0 {
        eprintln("failure");
        exit(1);
    } else {    
        println("success");
    }
}

http :: fn (client : Client) {
    ch : u8 = 0;

    while read(client.fd, &ch as usize, 1) == 1 {
        if ch == '\n' {
            read(client.fd, &ch as usize, 1);

            if ch == '\r' {
                read(client.fd, &ch as usize, 1);

                break;
            }
        }
    }

    printfd(client.fd, "HTTP/1.1 200 OK\r\nConnection : close\r\nContent-Type : text/html\r\n\r\n<h1>Hello, World!</h1>\n");
}

echo :: fn (client : Client) {
    ch : u8 = 0;

    while read(client.fd, &ch as usize, 1) == 1 {
        write(client.fd, &ch as usize, 1);
    }
}

main :: fn () {
    server := @uninitialized(Server);
    client := @uninitialized(Client);

    server_init(&server);

    while true {
        server_accept(server, &client);

        http(client);
        // echo(client);

        client_close(client);
    }
}

exit :: std.process.exit;
printfd :: std.fs.write;
print :: std.io.print;
println :: std.io.println;
eprintln :: std.io.eprintln;
socket :: std.os.linux.socket;
bind :: std.os.linux.bind;
write :: std.os.linux.write;
read :: std.os.linux.read;
close :: std.os.linux.close;
listen :: std.os.linux.listen;
accept :: std.os.linux.accept;
socklen_t :: std.os.linux.socklen_t;
sockaddr :: std.os.linux.sockaddr;
sockaddr_in :: std.os.linux.sockaddr_in;
setsockopt :: std.os.linux.setsockopt;
AF_INET :: std.os.linux.AF_INET;
SOCK_STREAM :: std.os.linux.SOCK_STREAM;
SOL_SOCKET :: std.os.linux.SOL_SOCKET;
SO_REUSEADDR :: std.os.linux.SO_REUSEADDR;
SO_REUSEPORT :: std.os.linux.SO_REUSEPORT;
