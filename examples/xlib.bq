// A little x11 experiment to render random noise colors
//
// Compilation Guide:
// 1. Get a Barq compiler, compile the example into object file with the default runner being disabled
//    i.e: `barq compile examples/xlib.bq --output xlib_example.o --emit object --runner none`
// 2. Get a C compiler, use it to link the object file produced by Barq
//                      with xlib and C runtime library and C math library
//    i.e: `cc xlib_example.o -lX11 -o xlib_example`

std :: @import("std");

main :: fn () u8 @foreign("main") {
    display := XOpenDisplay(0 as [*]const u8);

    if display as usize == 0 {
        std.c.printf("failed to open display\n");

        return 1;
    }

    root := XDefaultRootWindow(display);
    screen := XDefaultScreen(display);
    gc := XDefaultGC(display, screen);

    x: c_int = 0;
    y: c_int = 0;
    width: c_uint = 800;
    height: c_uint = 600;
    border_width: c_uint = 0;
    depth: c_uint;

    window := XCreateSimpleWindow(display, XDefaultRootWindow(display), x, y, width, height, border_width, 0, XBlackPixel(display, screen));

    XMapWindow(display, window);

    std.c.srand(std.c.time(0 as *std.c.time_t) as c_uint);

    while true {
        XGetGeometry(display, window, &root, &x, &y, &width, &height, &border_width, &depth);

        XSetForeground(display, gc, (std.c.rand() % 0xFFFFFF) as c_ulong);

        i: u16 = 0;
        
        while (i < 255 * 2) {
            XDrawPoint(display, window, gc, std.c.rand() % width as c_int, std.c.rand() % height as c_int);

            i += 1;
        }

        XFlush(display);
    }

    return 0;
}

XDisplay :: struct {};
XGraphicsContext :: struct {};

XID :: c_ulong;
XWindow :: XID;
XDrawable :: XID;

XOpenDisplay :: fn (display_name: [*]const u8) *XDisplay @foreign("XOpenDisplay");
XCloseDisplay :: fn (display: *XDisplay) @foreign("XCloseDisplay");
XFlush :: fn (display: *XDisplay) @foreign("XFlush");

XBlackPixel :: fn (display: *XDisplay, screen: c_int) c_ulong @foreign("XBlackPixel");

XDefaultScreen :: fn (display: *XDisplay) c_int @foreign("XDefaultScreen");
XDefaultRootWindow :: fn (display: *XDisplay) XWindow @foreign("XDefaultRootWindow");
XCreateSimpleWindow :: fn (display: *XDisplay, parent: XWindow, x: c_int, y: c_int, width: c_uint, height: c_uint, border_width: c_uint, border: c_ulong, background: c_ulong) XWindow @foreign("XCreateSimpleWindow");
XDestroyWindow :: fn (display: *XDisplay, window: XWindow) @foreign("XDestroyWindow");
XMapWindow :: fn (display: *XDisplay, window: XWindow) @foreign("XMapWindow");

XDefaultGC :: fn (display: *XDisplay, screen: c_int) *XGraphicsContext @foreign("XDefaultGC");
XSetForeground :: fn (display: *XDisplay, gc: *XGraphicsContext, foreground: c_ulong) @foreign("XSetForeground");
XSetBackground :: fn (display: *XDisplay, gc: *XGraphicsContext, background: c_ulong) @foreign("XSetBackground");
XDrawPoint :: fn (display: *XDisplay, drawable: XDrawable, gc: *XGraphicsContext, x: c_int, y: c_int) @foreign("XDrawPoint");
XGetGeometry :: fn (display: *XDisplay, drawable: XDrawable, root_return: *XWindow, x_return: *c_int, y_return: *c_int, width_return: *c_uint, height_return: *c_uint, border_width_return: *c_uint, depth_return: *c_uint) @foreign("XGetGeometry");
