// A little x11 experiment to render random noise colors
//
// Compilation Guide:
// 1. Get a Barq compiler, compile the example into object file with the default runner being disabled
//    i.e: `barq compile examples/xlib.bq --output xlib_example.o --emit object --runner none`
// 2. Get a C compiler, use it to link the object file produced by Barq
//                      with xlib and C runtime library and C math library
//    i.e: `cc xlib_example.o -lX11 -o xlib_example`

std :: @import("std");

main :: fn () u8 @foreign("main") {
    display :: open_display(0 as [*]const u8);

    if display as usize == 0 {
        std.c.printf("failed to open display\n");

        return 1;
    }

    root :: default_root_window(display);
    screen :: default_screen(display);
    gc :: default_gc(display, screen);

    x : c_int = 0;
    y : c_int = 0;
    width : c_uint = 800;
    height : c_uint = 600;
    border_width : c_uint = 0;
    depth : c_uint = 0;

    black_pixel :: black_pixel(display, screen);

    window :: create_simple_window(display, root, x, y, width, height, border_width, 0, black_pixel);

    map_window(display, window);

    std.c.srand(std.c.time(0 as *std.c.time_t) as c_uint);

    while true {
        get_geometry(display, window, &root, &x, &y, &width, &height, &border_width, &depth);

        set_foreground(display, gc, (std.c.rand() % 0xFFFFFF) as c_ulong);

        i : u16 = 0;

        while (i < 255 * 2) {
            draw_point(display, window, gc, std.c.rand() % width as c_int, std.c.rand() % height as c_int);

            i += 1;
        }

        flush(display);
    }

    return 0;
}

Display :: struct {}
GraphicsContext :: struct {}

ID :: c_ulong;
Window :: ID;
Drawable :: ID;

open_display :: fn (display_name : [*]const u8) *Display @foreign("XOpenDisplay");
close_display :: fn (display : *Display) @foreign("XCloseDisplay");
flush :: fn (display : *Display) @foreign("XFlush");

black_pixel :: fn (display : *Display, screen : c_int) c_ulong @foreign("XBlackPixel");

default_screen :: fn (display : *Display) c_int @foreign("XDefaultScreen");
default_root_window :: fn (display : *Display) Window @foreign("XDefaultRootWindow");
create_simple_window :: fn (display : *Display, parent : Window, x : c_int, y : c_int, width : c_uint, height : c_uint,
                            border_width : c_uint, border : c_ulong, background : c_ulong) Window @foreign("XCreateSimpleWindow");
destroy_window :: fn (display : *Display, window : Window) @foreign("XDestroyWindow");
map_window :: fn (display : *Display, window : Window) @foreign("XMapWindow");

default_gc :: fn (display : *Display, screen : c_int) *GraphicsContext @foreign("XDefaultGC");
set_foreground :: fn (display : *Display, gc : *GraphicsContext, foreground : c_ulong) @foreign("XSetForeground");
set_background :: fn (display : *Display, gc : *GraphicsContext, background : c_ulong) @foreign("XSetBackground");
draw_point :: fn (display : *Display, drawable : Drawable, gc : *GraphicsContext, x : c_int, y : c_int) @foreign("XDrawPoint");
get_geometry :: fn (display : *Display, drawable : Drawable, root_return : *Window, x_return : *c_int, y_return : *c_int,
                    width_return : *c_uint, height_return : *c_uint, border_width_return : *c_uint, depth_return : *c_uint) @foreign("XGetGeometry");
